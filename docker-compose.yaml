services:
  postgres:
    image: postgres:13
    container_name: postgresd
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
      POSTGRES_DB: ${POSTGRES_DB:-airflow}
    ports:
      - "5433:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - default

  spark-master:
    image: bitnami/spark:3.5.1
    platform: linux/arm64/v8
    container_name: spark-master
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: "no"
      SPARK_RPC_ENCRYPTION_ENABLED: "no"
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: "no"
      SPARK_SSL_ENABLED: "no"
    ports:
      - "8080:8080"
    volumes:
      - ./etl:/opt/airflow/etl
    networks:
      - default

  spark-worker-1:
    image: bitnami/spark:3.5.1
    platform: linux/arm64/v8
    container_name: spark-worker-1
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
    volumes:
      - ./etl:/opt/airflow/etl
    networks:
      - default

  spark-worker-2:
    image: bitnami/spark:3.5.1
    platform: linux/arm64/v8
    container_name: spark-worker-2
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
    volumes:
      - ./etl:/opt/airflow/etl
    networks:
      - default

  # Airflow Webserver (separate from scheduler to avoid heartbeat issues)
  airflow:
    platform: linux/arm64/v8
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow
    depends_on:
      - postgres
      - spark-master
      - airflow-scheduler
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres:5432/${POSTGRES_DB:-airflow}
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__WEBSERVER__RBAC: "True"
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
      PYTHONPATH: /opt/airflow

      # Optional Spark hints (transform uses local[*]; kept for future external mode)
      SPARK_MASTER_URL: ${SPARK_MASTER_URL:-spark://spark-master:7077}
      SPARK_DRIVER_HOST: airflow
      PYSPARK_PYTHON: python3
      PYSPARK_DRIVER_PYTHON: python3

      # MinIO configuration for extract/transform
      MINIO_ENDPOINT_URL: ${MINIO_ENDPOINT_URL:-http://minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-spacex-data}

      # Snowflake configuration for DWH data
      SNOWFLAKE_ACCOUNT: ${SNOWFLAKE_ACCOUNT}
      SNOWFLAKE_USER: ${SNOWFLAKE_USER}
      SNOWFLAKE_PASSWORD: ${SNOWFLAKE_PASSWORD}
      SNOWFLAKE_WAREHOUSE: ${SNOWFLAKE_WAREHOUSE}
      SNOWFLAKE_DATABASE: ${SNOWFLAKE_DATABASE}
      SNOWFLAKE_SCHEMA: ${SNOWFLAKE_SCHEMA}
    ports:
      - "8081:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./etl:/opt/airflow/etl
      - ./airflow/logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      bash -c "
        airflow db migrate &&
        airflow users create --username admin --password ${POSTGRES_PASSWORD:-airflow} --firstname Admin --lastname User --role Admin --email admin@example.com || true &&
        airflow webserver"
    networks:
      - default

  # Dedicated Scheduler service
  airflow-scheduler:
    platform: linux/arm64/v8
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    depends_on:
      - postgres
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres:5432/${POSTGRES_DB:-airflow}
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      PYTHONPATH: /opt/airflow

      # Optional Spark hints (not used in local mode, kept for future external mode)
      SPARK_MASTER_URL: ${SPARK_MASTER_URL:-spark://spark-master:7077}
      SPARK_DRIVER_HOST: airflow-scheduler
      PYSPARK_PYTHON: python3
      PYSPARK_DRIVER_PYTHON: python3

      # MinIO for extract/transform (not strictly required for scheduler, but harmless)
      MINIO_ENDPOINT_URL: ${MINIO_ENDPOINT_URL:-http://minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-spacex-data}

      # Snowflake (not strictly required for scheduler, but harmless)
      SNOWFLAKE_ACCOUNT: ${SNOWFLAKE_ACCOUNT}
      SNOWFLAKE_USER: ${SNOWFLAKE_USER}
      SNOWFLAKE_PASSWORD: ${SNOWFLAKE_PASSWORD}
      SNOWFLAKE_WAREHOUSE: ${SNOWFLAKE_WAREHOUSE}
      SNOWFLAKE_DATABASE: ${SNOWFLAKE_DATABASE}
      SNOWFLAKE_SCHEMA: ${SNOWFLAKE_SCHEMA}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./etl:/opt/airflow/etl
      - ./airflow/logs:/opt/airflow/logs
    command: >
      bash -c "
        airflow db migrate &&
        airflow scheduler"
    networks:
      - default

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    networks:
      - default

  superset:
    image: apache/superset:latest
    container_name: superset
    depends_on:
      - postgres
    environment:
      SUPERSET_SECRET_KEY: "gJCFB40L6X0AELIMKS6Hrd1T8mDhcavwBuCcFpEmwNlc09QXAp7Qp3+6"
      SUPERSET_ADMIN_USERNAME: admin
      SUPERSET_ADMIN_PASSWORD: 1441
      SUPERSET_ADMIN_FIRSTNAME: admin
      SUPERSET_ADMIN_LASTNAME: admin
      SUPERSET_ADMIN_EMAIL: admin@example.com
      
      # PostgreSQL configuration for Superset
      SUPERSET__SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://airflow:airflow@postgres:5432/superset
      
      # Snowflake connection for data sources
      SNOWFLAKE_ACCOUNT: ${SNOWFLAKE_ACCOUNT}
      SNOWFLAKE_USER: ${SNOWFLAKE_USER}
      SNOWFLAKE_PASSWORD: ${SNOWFLAKE_PASSWORD}
      SNOWFLAKE_WAREHOUSE: ${SNOWFLAKE_WAREHOUSE}
      SNOWFLAKE_DATABASE: ${SNOWFLAKE_DATABASE}
      SNOWFLAKE_SCHEMA: ${SNOWFLAKE_SCHEMA}
    ports:
      - "88:8088"
    volumes:
      - ./superset:/app/superset_home
    command: >
      /bin/sh -c "
        pip install 'snowflake-sqlalchemy>=1.2.0' &&
        export SUPERSET__SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://airflow:airflow@postgres:5432/superset' &&
        superset db upgrade &&
        superset fab create-admin --username admin --firstname admin --lastname admin --email admin@example.com --password 1441 &&
        superset init &&
        superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger"
    networks:
      - default

volumes:
  pg_data:
  superset_home:
  minio_data:

networks:
  default:
